//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
namespace MyTestNameSpace
{
    public static partial class MyEnumExtensions
    {
        public static string ToStringFast(this MyTestNameSpace.MyEnum value)
            => value switch
            {
                MyTestNameSpace.MyEnum.First => nameof(MyTestNameSpace.MyEnum.First),
                MyTestNameSpace.MyEnum.Second => "2nd",
                MyTestNameSpace.MyEnum.Third => nameof(MyTestNameSpace.MyEnum.Third),
                MyTestNameSpace.MyEnum.Fourth => "4th",
                _ => value.ToString(),
            };

       public static bool IsDefined(MyTestNameSpace.MyEnum value)
            => value switch
            {
                MyTestNameSpace.MyEnum.First => true,
                MyTestNameSpace.MyEnum.Second => true,
                MyTestNameSpace.MyEnum.Third => true,
                MyTestNameSpace.MyEnum.Fourth => true,
                _ => false,
            };

        public static bool IsDefined(string name)
            => name switch
            {
                nameof(MyTestNameSpace.MyEnum.First) => true,
                nameof(MyTestNameSpace.MyEnum.Second) => true,
                nameof(MyTestNameSpace.MyEnum.Third) => true,
                nameof(MyTestNameSpace.MyEnum.Fourth) => true,
                _ => false,
            };

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            bool ignoreCase, 
            out MyTestNameSpace.MyEnum value)
            => ignoreCase ? TryParseIgnoreCase(name, out value) : TryParse(name, out value);

        private static bool TryParseIgnoreCase(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyTestNameSpace.MyEnum value)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(MyTestNameSpace.MyEnum.First), System.StringComparison.OrdinalIgnoreCase):
                    value = MyTestNameSpace.MyEnum.First;
                    return true;
                case { } s when s.Equals(nameof(MyTestNameSpace.MyEnum.Second), System.StringComparison.OrdinalIgnoreCase):
                    value = MyTestNameSpace.MyEnum.Second;
                    return true;
                case { } s when s.Equals(nameof(MyTestNameSpace.MyEnum.Third), System.StringComparison.OrdinalIgnoreCase):
                    value = MyTestNameSpace.MyEnum.Third;
                    return true;
                case { } s when s.Equals(nameof(MyTestNameSpace.MyEnum.Fourth), System.StringComparison.OrdinalIgnoreCase):
                    value = MyTestNameSpace.MyEnum.Fourth;
                    return true;
                case { } s when int.TryParse(name, out var val):
                    value = (MyTestNameSpace.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out MyTestNameSpace.MyEnum value)
        {
            switch (name)
            {
                case nameof(MyTestNameSpace.MyEnum.First):
                    value = MyTestNameSpace.MyEnum.First;
                    return true;
                case nameof(MyTestNameSpace.MyEnum.Second):
                    value = MyTestNameSpace.MyEnum.Second;
                    return true;
                case nameof(MyTestNameSpace.MyEnum.Third):
                    value = MyTestNameSpace.MyEnum.Third;
                    return true;
                case nameof(MyTestNameSpace.MyEnum.Fourth):
                    value = MyTestNameSpace.MyEnum.Fourth;
                    return true;
                case { } s when int.TryParse(name, out var val):
                    value = (MyTestNameSpace.MyEnum)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        public static MyTestNameSpace.MyEnum[] GetValues()
        {
            return new[]
            {
                MyTestNameSpace.MyEnum.First,
                MyTestNameSpace.MyEnum.Second,
                MyTestNameSpace.MyEnum.Third,
                MyTestNameSpace.MyEnum.Fourth,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(MyTestNameSpace.MyEnum.First),
                nameof(MyTestNameSpace.MyEnum.Second),
                nameof(MyTestNameSpace.MyEnum.Third),
                nameof(MyTestNameSpace.MyEnum.Fourth),
            };
        }
    }
}