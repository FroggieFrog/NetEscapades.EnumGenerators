//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NetEscapades.EnumGenerators source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable
using System;
namespace Something.Blah
{
    public static partial class ShortName
    {
        public static string ToStringFast(this Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => nameof(Something.Blah.ShortName.First),
                Something.Blah.ShortName.Second => nameof(Something.Blah.ShortName.Second),
                _ => value.ToString(),
            };

        public static bool HasFlag(this Something.Blah.ShortName value, Something.Blah.ShortName flag)
            => value switch
            {
                0  => flag.Equals(0),
                _ => (value & flag) != 0,
            };

       public static bool IsDefined(Something.Blah.ShortName value)
            => value switch
            {
                Something.Blah.ShortName.First => true,
                Something.Blah.ShortName.Second => true,
                _ => false,
            };

        public static bool IsDefined(string name)
            => name switch
            {
                nameof(Something.Blah.ShortName.First) => true,
                nameof(Something.Blah.ShortName.Second) => true,
                _ => false,
            };

        /// <summary>
        /// Slower then the <see cref="IsDefined(string)",
        /// bacause the <c>ReadOnlySpan<char></c> can't be cached like a string, tho it doesn't allocate memory./>
        /// </summary>
        /// <param name="name"></param>
        /// <returns><c>true</c> if defined, otherwise <c>false</c></returns>
        public static bool IsDefined(in ReadOnlySpan<char> name)
            => name switch
            {
                ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.First).AsSpan(), System.StringComparison.Ordinal) => true,
                ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.Second).AsSpan(), System.StringComparison.Ordinal) => true,
                _ => false,
            };

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            bool ignoreCase, 
            out Something.Blah.ShortName value)
            => ignoreCase ? TryParse(name, System.StringComparison.OrdinalIgnoreCase, out value) : TryParse(name, System.StringComparison.Ordinal, out value);

        private static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            System.StringComparison stringComparisonOption, 
            out Something.Blah.ShortName value)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(Something.Blah.ShortName.First), stringComparisonOption):
                    value = Something.Blah.ShortName.First;
                    return true;
                case { } s when s.Equals(nameof(Something.Blah.ShortName.Second), stringComparisonOption):
                    value = Something.Blah.ShortName.Second;
                    return true;
                case { } s when int.TryParse(name, out var val):
                    value = (Something.Blah.ShortName)val;
                    return true;
                default:
                    value = default;
                    return false;
            }
        }

        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            string? name, 
            out Something.Blah.ShortName value)
            => TryParse(name, System.StringComparison.Ordinal, out value);

        /// <summary>
        /// Slower then the <see cref="TryParse(string, bool, out Something.Blah.ShortName)"/>,
        /// bacause the <c>ReadOnlySpan<char></c> can't be cached like a string, tho it doesn't allocate memory./>
        /// </summary>
        /// <param name="name"></param>
        /// <param name="ignoreCase"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            bool ignoreCase, 
            out Something.Blah.ShortName result)
            => ignoreCase ? TryParse(name, System.StringComparison.OrdinalIgnoreCase, out result) : TryParse(name, System.StringComparison.Ordinal, out result);

        private static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            System.StringComparison stringComparisonOption, 
            out Something.Blah.ShortName result)
        {
            switch (name)
            {
                case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.First).AsSpan(), stringComparisonOption):
                    result = Something.Blah.ShortName.First;
                    return true;
                case ReadOnlySpan<char> current when current.Equals(nameof(Something.Blah.ShortName.Second).AsSpan(), stringComparisonOption):
                    result = Something.Blah.ShortName.Second;
                    return true;
#if NETCOREAPP2_1_OR_GREATER
                case ReadOnlySpan<char> current when int.TryParse(name, out var numericResult):
#else
                case ReadOnlySpan<char> current when int.TryParse(name.ToString(), out var numericResult):
#endif
                    result = (Something.Blah.ShortName)numericResult;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        /// <summary>
        /// Slower then the <see cref="TryParse(string, out Something.Blah.ShortName)"/>,
        /// bacause the <c>ReadOnlySpan<char></c> can't be cached like a string, tho it doesn't allocate memory./>
        /// </summary>
        /// <param name="name"></param>
        /// <param name="result"></param>
        /// <returns></returns>
        public static bool TryParse(
#if NETCOREAPP3_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.NotNullWhen(true)]
#endif
            in ReadOnlySpan<char> name, 
            out Something.Blah.ShortName result)
            => TryParse(name, System.StringComparison.Ordinal, out result);

        public static Something.Blah.ShortName[] GetValues()
        {
            return new[]
            {
                Something.Blah.ShortName.First,
                Something.Blah.ShortName.Second,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(Something.Blah.ShortName.First),
                nameof(Something.Blah.ShortName.Second),
            };
        }
    }
}